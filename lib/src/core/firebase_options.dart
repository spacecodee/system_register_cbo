// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart' show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  //global
  static String projectId = dotenv.env['PROJECT_ID'] ?? '';
  static String storageBucket = dotenv.env['STORAGE_BUCKET'] ?? '';

  //android
  static String androidApiKey = dotenv.env['ANDROID_APIKEY'] ?? '';
  static String androidAppId = dotenv.env['ANDROID_APP_ID'] ?? '';
  static String androidMessagingSenderId = dotenv.env['ANDROID_MESSAGING_SENDER_ID'] ?? '';

  //ios
  static String iosApiKey = dotenv.env['IOS_APIKEY'] ?? '';
  static String iosAppId = dotenv.env['IOS_APP_ID'] ?? '';
  static String iosMessagingSenderId = dotenv.env['IOS_MESSAGING_SENDER_ID'] ?? '';
  static String iosClientId = dotenv.env['IOS_CLIENT_ID'] ?? '';
  static String iosBundleId = dotenv.env['IOS_BUNDLE_ID'] ?? '';

  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions android = FirebaseOptions(
    apiKey: DefaultFirebaseOptions.androidApiKey,
    appId: DefaultFirebaseOptions.androidAppId,
    messagingSenderId: DefaultFirebaseOptions.androidMessagingSenderId,
    projectId: DefaultFirebaseOptions.projectId,
    storageBucket: DefaultFirebaseOptions.storageBucket,
  );

  static FirebaseOptions ios = FirebaseOptions(
    apiKey: DefaultFirebaseOptions.iosApiKey,
    appId: DefaultFirebaseOptions.iosAppId,
    messagingSenderId: DefaultFirebaseOptions.iosMessagingSenderId,
    projectId: DefaultFirebaseOptions.projectId,
    storageBucket: DefaultFirebaseOptions.storageBucket,
    iosClientId: DefaultFirebaseOptions.iosClientId,
    iosBundleId: DefaultFirebaseOptions.iosBundleId,
  );
}
